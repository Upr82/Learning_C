#ifndef LIST_H_INCLUDED
#define LIST_H_INCLUDED

#include <stdbool.h>

#define TSIZE 45
struct film {
char title[TSIZE];
int rating;
};

typedef struct film Item;

typedef struct node {
Item item;
struct node * next;
} Node;

typedef Node * List;
//Прототипы функций
//операция: инициализация списка
//предусловие: plist указывает на список
//постусловие: список инициализирован пустым содержимым
void InitializeList(List * plist);

//операция: определение, является ли список пустым
//предусловие: plist указывает на инициализированный список
//постусловие: возврат TRUE если список пуст, FALSE в противном
bool ListIsEmpty(const List * plist);

//операция: определение, является ли список полным
//предусловие: plist указывает на инициализированный список
//постусловие: возврат TRUE если список полон, FALSE в противном
bool ListIsFull(const List * plist);

//операция: определение количесва элементов в списке
//предусловие: plist указывает на инициализированный список
//постусловие: ф-ия возвращает число элементов в списке
unsigned int ListItemCount(const List * plist);

//операция: добавление элеменов в конец списка
//предусловие: item - элемент, добавляемый в список
//              plist указываетна инициализированный список
//постусловие: если возможно, ф-ия добавляет элемент в конец
//              списка и возвр TRUE, иначе False
bool AddItem(Item item, List * plist);

//операция: применение функции к каждому эл. списка
//предусловие: plist указывает на инициализ. список,
//             pfun казывает на ф-ию, которая принимает арг Item
//             и не имеет возвращаемого значения
//постусловие: ф-ия, указанная pfun выполняется один раз для
//             кажого элемента в списке
void Traverse(const List *plist, void(* pfun)(Item item));

//операция: освобождение выделенной памяти, если она есть
//предусловие: plist указывает на инициализированный список
//постусловие: любая память , выделенная для списка, освобождается,
//             список устанавливается в пустое состояние
void EmptyTheList(List * plist);

#endif // LIST_H_INCLUDED
